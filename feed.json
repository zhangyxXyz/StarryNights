{
    "version": "https://jsonfeed.org/version/1",
    "title": "繁夜",
    "subtitle": "",
    "icon": "https://onlyzyx.com/images/favicon.ico",
    "description": "编程笔记 & 随想",
    "home_page_url": "https://onlyzyx.com",
    "items": [
        {
            "id": "https://onlyzyx.com/posts/27651.html",
            "url": "https://onlyzyx.com/posts/27651.html",
            "title": "Hexo主题Shoka使用手册",
            "date_published": "2022-06-05T17:26:25.000Z",
            "content_html": "<html><head></head><body><h2 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h2>\n<p><code>Hexo</code>  主题  <code>Shoka</code>  使用手册，用于个人使用查找</p>\n<p>Todo -----</p>\n</body></html>",
            "tags": [
                "二进制杂谈",
                "Hexo",
                "Hexo",
                "Shoka",
                "Hexo主题"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/42926.html",
            "url": "https://onlyzyx.com/posts/42926.html",
            "title": "为什么程序员都是夜猫子？",
            "date_published": "2022-05-06T19:44:09.000Z",
            "content_html": "<html><head></head><body><p>一种很流行的说法是，程序员是把 <span class=\"pink\">咖啡因</span> 转化成 <span class=\"pink\">程序代码</span> 的机器。</p>\n<p><img data-src=\"/posts/42926/Chimp_Brain_in_a_jar.webp\" alt=\"伦敦科技馆里一个大猩猩的大脑\" align=\"right\" width=\"280px\" margin=\"0px 0px 0px 10px\"></p>\n<p>说的是实情，随便问一个程序员，问他什么时候工作最有状态，估计他很有可能说是深夜。有人稍微早一点，有人更晚。有一种流行的趋势是凌晨 4 点起床，在破晓之前这段时间里做一些事情。而另一些人喜欢凌晨 4 点才睡觉。</p>\n<p>所有这些的主要目的是躲避打搅。但是你把自己反锁在屋里不就行了？为什么对夜晚情有独钟？</p>\n<p>我想，这事归纳下来有 3 点：</p>\n<ul>\n<li><strong>工人的时间表</strong></li>\n<li><strong>疲倦的大脑</strong></li>\n<li><strong>明亮的电脑屏幕</strong></li>\n</ul>\n<h1 id=\"工人的时间表\"><a class=\"anchor\" href=\"#工人的时间表\">#</a> 工人的时间表</h1>\n<p>Paul Graham 在 2009 年写了一篇关于 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucGF1bGdyYWhhbS5jb20vbWFrZXJzc2NoZWR1bGUuaHRtbA==\">工人的时间表</span> 的文章 —— 主要是说这个世界 (主要) 存在两种时间表。传统的管理者的时间表 —— 一天的时间别分成了很多小时，一次十分钟的分心至多会浪费你 1 个小时的时间。</p>\n<p>而另一种情况是程序员们所说的工人的时间表 —— 生产东西的人的时间表。研究一个大型的抽象的系统，需要把整件事情装进大脑 —— 这样的一些人类似于用珍贵的水晶玻璃搭建一间房子，一旦有人打搅你，整个结构都会滑落，摔成无数的碎片。</p>\n<p>这就是为什么被打扰的程序员会如此的生气。</p>\n<p>因为这是一种巨大的精力上的投资，在没有几个小时不被打搅的环境中的酝酿，你不可能开始工作。如果你好不容易在大脑中构建了整个要思考的事情的模型，而在半个小时后被人摧毁，这是很大的浪费。</p>\n<p>事实上，在跟很多的企业创办人交谈后，你会发现，他们都感觉在白天根本无法做任何事情。持续不断的打扰、重要的事情需要注意、大量的邮件需要处理，环境不允许他们坐下来做事。于是他们大部分人都在夜晚，人们都入睡的时候去完成他们要做的事做完。<br>\n<img data-src=\"/posts/42926/ballmer-peak.png\" alt=\"Ballmers peak\" width=\"100%\"></p>\n<h1 id=\"疲倦的大脑\"><a class=\"anchor\" href=\"#疲倦的大脑\">#</a> 疲倦的大脑</h1>\n<p>但是程序员仍然在晚上会困倦。程序员不是超人。程序员甚至在白天都会感到疲劳。</p>\n<p>为什么我们要把智力上最复杂的事情放到我们的大脑想去睡觉的时间段里去完成，而在我们的大脑最敏锐最清醒的时候去做相对简单的事？</p>\n<p>因为疲倦让我们编写出最好的代码。</p>\n<p>跟 ballmer 峰值相似，疲倦能使我们的精力更容易集中，因为你的大脑疲倦了，不得不集中精力！没有多余的脑能量来提供你去三心二意。</p>\n<p>对我来说，如果喝了太多的茶或在错误的时间喝了提神饮料，我反而干不了什么事。我会过度兴奋，一会查看微博，一会看看新闻，不知道自己该做什么。</p>\n<p>你会认为我应该更有效率的工作 —— 精力充沛，大脑超频。但正好相反，我东一榔头西一耙子，根本无法在一件事情上定神 2 分钟。</p>\n<p>而反过来，当我稍微有点疲倦时，我却能把屁股安稳的放到椅子上开始编程。在大脑稍微有点疲倦的情况下，我能连续编程数小时，毫不考虑微博或 Facebook。好像这互联网根本不存在。</p>\n<p>我感觉大部分程序员都是跟我的感觉是一样的。对于日常工作中 80% 的任务，我们的脑能力都是过剩的 —— 除非你需要写的是在当前程序运行的环境中让它增速 10 的算法。即使你开发的是最高级的机器学习想象功能，其中大部分的工作也只是简单的整理数据和以一种合适的方式表现输出结果。</p>\n<p>当你的大脑不是满负荷运转时，它总是想找点事情做。疲乏会让你迟钝，手头的工作就已经够你消化了。</p>\n<h1 id=\"明亮的电脑屏幕\"><a class=\"anchor\" href=\"#明亮的电脑屏幕\">#</a> 明亮的电脑屏幕</h1>\n<p><img data-src=\"/posts/42926/Innsbrucklarge.jpg\" alt=\"Innsbrucklarge\" width=\"100%\"></p>\n<p>这一点非常的简单。在晚上老是盯着明亮的光源，你的睡眠周期会推迟。你忘了该是睡觉的时候了，直到凌晨 3 点。然后你早上 11 点才能起来，当晚上再次到来时你不再感到困倦，因为你 11 点才起床！</p>\n<p>反复这样的作息规律，你的身体会进入另外一个时区。更有趣的是，这种周期不会一直推迟下去，一旦你进入了这种 3 点或 4 点才去睡觉的生理平衡状态，你会一直留在这种状态里。</p>\n<p>也许这是一种警讯在起作用，社会在告诉我们，如果我们在下午 2 点吃早餐，会被认为是很邋遢的人。</p>\n<h1 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>总结一下，程序员喜欢在晚上工作，是因为这时没有何时应该停止工作的限制，这让人感到更放松，你的大脑不再思考让你分心的事情，明亮的屏幕使人清醒。</p>\n</body></html>",
            "tags": [
                "二进制杂谈",
                "随笔"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/16108.html",
            "url": "https://onlyzyx.com/posts/16108.html",
            "title": "Hexo构建备忘",
            "date_published": "2022-05-04T12:16:13.000Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉，您输入的密码错误，请检查后重新输入。\" data-whm=\"抱歉, 当前文章无法完成校验, 不过您还是可以看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"aace5fac04079f6923fa0f3f45d93e5fa7ae4ac856aa84f10992d3da7b941a64\">4630436162ade97ba2718b7d0c4b3b63433b3a047a2b98afd326b7b25828ddc7e8a26f306bd28f1d30317388c0646d8b973aea81f470308ffd7928b9d767504e32d5517e8df545836ba67a880d08dd56277bac15b05783f67c122484fc1becec1ae97c091772bb4ca4f6e689487881baa8148c2d6e970203f8df5990eaba5bc38643437cdd71f756c08a8851ff19c48359afda31e01fc531d1aa4885edead0c35b299334dc89b6ef2e606c6606f0be32c3dd3b3249dd044cee12f3e6011654cc8e36996a34c22ed23e6218c00e2ab92e930e0a85370c056daae5b4e29b734be73ce27e100255368256f946dd5d5851cefc22fc1bb1072b74d1e10fa85cde1e4bb39608f5e3b229afcfefc374cb4b3b337f68662fcb46c9b4d31c7c87f8743fc7d5fc997db2871b4f07aa7c3d84528804969c5b0c0636bb89895b34cff6ae4a4a1777c51589996eb0a9c873a1f6102d627ff1577eb8d16a8123781ca8c982918fd42c50b8074ff43ffc319743442cdf0b31b7efbbfb5ebae5f6798969f69e51c57421b94d117fa251b5046783fc74b67851637d6c11dfd3fa8142023a4651dc11a2193daafe997b188379913eab6ed7080ac11523dad7f251c0f8d345094646f0761fef2c6e6d989f7822a44fce266c0269ad0e16dfcd4c474de77d1d2447ea33fae086957844afea5accefbe34c4c667a45942a9747ba01390e9afbbb80934062aab977468a375fa4b9224947b2c72922ba54a357d1d1e6e37bdc551e4a33c25acdd9f5ebf9fb5e808ee95ef7d529fd10b0debc4d692e445a9ca1b2512fbb6f3def0394b159b8980bcbf7ed58a46f45f</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">当前文章暂不对外可见，请输入密码后查看！</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "二进制杂谈",
                "Hexo",
                "Secret"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/18163.html",
            "url": "https://onlyzyx.com/posts/18163.html",
            "title": "基于GitHub Pages + Hexo搭建个人博客",
            "date_published": "2022-05-01T10:06:10.000Z",
            "content_html": "<html><head></head><body><h2 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h2>\n<p><code>Hexo</code>  是一个快速、简洁且高效的博客框架。 <code>Hexo</code>  使用  <code>Markdown</code> （或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。即把用户的  <code>markdown</code>  文件，按照指定的主题解析成静态网页。</p>\n<p>简单点说  <code>Hexo</code>  就是一个博客的框架，就好比盖房子需要的框架结构一样，这是博客搭建起来的基础，最后装修好 (<span class=\"blue\">各种主题</span>) 就完成了。</p>\n<h2 id=\"优劣对比\"><a class=\"anchor\" href=\"#优劣对比\">#</a> 优劣对比</h2>\n<p>博客框架基本可以划分为 <span class=\"blue\">静态博客</span> 和 <span class=\"blue\">动态博客</span> 两个阵营，这儿主要从 <span class=\"blue\">静态博客</span> 和 <span class=\"blue\">动态博客</span> 的优劣进行对比，其他的基本属于框架本身带来的特性对比，这个到对应官网查看描述自行比对即可</p>\n<p><strong>优势</strong></p>\n<p><code>Hexo</code>  是一个静态博客框架，除了其附加的易于管理，易于编辑和发布的特性之外，还具备静态网站的所有优势</p>\n<ol>\n<li>省心：不用担心黑客入侵</li>\n<li>省钱：占用空间小，纯  <code>html</code>  文件，每个文件控制在几  <code>kb</code>  以内，10000 篇内容的网站，也不过才几十  <code>MB</code> , 随便找个免费空间丢上去就好了</li>\n<li>速度快：页面已经存在，而不用像动态网站那样还要临时生成，所以打开速度快</li>\n<li>搜素引擎友好：有利于搜索引擎收录，有利于网站  <code>SEO</code>  排名优化</li>\n</ol>\n<p><strong>劣势</strong></p>\n<p><span class=\"blue\">静态博客</span> 与之相对的就是 <span class=\"blue\">动态博客</span>，那自然是缺少动态博客动的部分</p>\n<ol>\n<li>缺少机动性：常见功能评论，其他页面动态元素 (每日一句) 等等，在静态博客上都需要  <code>js</code>  配合其他服务才能实现，不如动态博客那样扩展简单</li>\n<li>维护成本高：由于页面都是预生成的，设计到框架底层或者页面增加通用元素，所有页面需要重新生成并发布</li>\n</ol>\n<p>当然在云服务遍地开花，越来越成熟的框架和第三方服务面前，静态博客的劣势基本都有妥善的解决方式，那么其纯粹的优点这也是更多人开始使用静态博客的原因了，当然具体的还是看个人选择。</p>\n<h2 id=\"hexo构建\"><a class=\"anchor\" href=\"#hexo构建\">#</a> Hexo 构建</h2>\n<p>一张图简单介绍下  <code>Hexo</code>  搭建流程</p>\n<p><img data-src=\"/posts/18163/mermaid/buildflow.jpeg\" alt=\"buildflow\" width=\"100%\"></p>\n<h2 id=\"基础环境\"><a class=\"anchor\" href=\"#基础环境\">#</a> 基础环境</h2>\n<h3 id=\"安装git\"><a class=\"anchor\" href=\"#安装git\">#</a> 安装 Git</h3>\n<p>打开链接，点击 <span class=\"green\">绿色屏幕</span> 下载对应版本安装即可</p>\n<div class=\"note info\">\n<p><span class=\"blue\">Git 客户端下载链接</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS8=\"> Click here, https://git-scm.com/</span></p>\n</div>\n<h3 id=\"安装nodejs\"><a class=\"anchor\" href=\"#安装nodejs\">#</a> 安装 Node.js</h3>\n<ul>\n<li>Windows: 通过安装包 (下载链接，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnLw==\">Cliek Here!</span>) 安装，或者通过  <code>nvs</code>  或者  <code>nvm</code>  安装。</li>\n<li>Mac: 使用  <code>Homebrew</code>  或  <code>MacPorts</code>  安装。</li>\n<li>Linux (DEB/RPM-based): 从  <code>NodeSource</code>  安装。</li>\n</ul>\n<p>其它：使用相应的软件包管理器进行安装，可以参考由  <code>Node.js</code>  提供的指导。</p>\n<h2 id=\"安装hexo框架\"><a class=\"anchor\" href=\"#安装hexo框架\">#</a> 安装 Hexo 框架</h2>\n<p>在基础环境搭建完毕后，即可使用  <code>npm</code>  安装  <code>Hexo</code></p>\n<p>安装过程极其简单，一行命令即可完成， <code>npm</code>  是安装工具， <code>install</code>  表示安装， <code>-g</code>  表示全局安装， <code>hexo-cli</code>  表示安装的是 hexo 框架</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli</pre></td></tr></tbody></table></figure><h3 id=\"初始化博客目录\"><a class=\"anchor\" href=\"#初始化博客目录\">#</a> 初始化博客目录</h3>\n<p>新建一个存放博客的文件夹  <code>blogtest</code>  <strong>(可以自定义为其他名称)</strong>, 并初始化</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>hexo init blogtest</pre></td></tr></tbody></table></figure><h3 id=\"安装hexo依赖\"><a class=\"anchor\" href=\"#安装hexo依赖\">#</a> 安装 Hexo 依赖</h3>\n<p><code>cd</code>  到  <code>blogtest</code>  目录，执行如下命令安装依赖环境</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr></tbody></table></figure><h3 id=\"hexo构建-2\"><a class=\"anchor\" href=\"#hexo构建-2\">#</a> Hexo 构建</h3>\n<p>这儿一般称作  <code>Hexo</code>  三连，如下命令分别执行</p>\n<ul>\n<li>清除博客发布目录  <code>public</code>  (部署的静态博客其实就是这个目录下的文件)</li>\n<li>重新生成发布目录</li>\n<li>本地运行  <code>Hexo</code>  服务，进行预览</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo generate <span class=\"token operator\">&amp;&amp;</span> hexo server</pre></td></tr></tbody></table></figure><p>此时在浏览器输入  <code>http://localhost:4000/</code>  即可对  <code>hexo</code>  构建的博客进行预览</p>\n<p class=\"gallery\"><img data-src=\"/posts/18163/HexoBuild.png\" alt=\"HexoBuild\"><br>\n<img data-src=\"/posts/18163/HexoServer.png\" alt=\"HexoServer\"></p>\n<p><span class=\"label info\">注意：有时候在浏览器输入 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FraG9zdDo0MDAw\">http://locakhost:4000</span>, 没有出现网页，可能是因为 4000 端口被占用了，可以使用把上一步骤的命令 hexo server 改为 hexo server -p 5000, 指定服务使用 5000 端口或者其他端口就可以了。</span></p>\n<h2 id=\"安装hexo主题\"><a class=\"anchor\" href=\"#安装hexo主题\">#</a> 安装 Hexo 主题</h2>\n<p><code>Hexo</code>  安装完成，启动服务在网页预览时，可以看到界面比较原始类，这就类似毛坯房，我们可以通过安装主题来装修这个毛坯房</p>\n<p><code>Hexo</code>  的主题有很多啊，使用最多的主题就是 <code>matery</code>  主题和 <code>butterfly</code>  主题。这两种主题各有千秋。可以先看两种主题的风格，然后做出选择，这里以 <code>butterfly</code>  主题以例。</p>\n<p><strong>万能的安装方式</strong></p>\n<ol>\n<li>前往主题所在的  <code>github</code>  仓库 clone 主题文件到本地博客目录的主题文件夹下面 ( <code>./blogtest/themes</code> )</li>\n<li>更改博客更目录下面的配置文件  <code>_config.yml</code> , 更改主题配置名称为目标主题名字</li>\n<li>重新 <span class=\"blue\">Hexo 三连</span> 查看效果</li>\n</ol>\n<p class=\"gallery\"><img data-src=\"/posts/18163/ChangeTheme.png\" alt=\"butterfly\"><br>\n<img data-src=\"/posts/18163/ThemeButterfly.png\" alt=\"themebutterfly\"></p>\n<p><span class=\"lable warning\">主题的安装建议前往主题的官网，官网一般会给出比较详细的安装指南，很多主题需要一些额外的设置，安装一些额外的依赖，同时还能给出更多的定制化说明</span></p>\n<h2 id=\"部署到github-pages\"><a class=\"anchor\" href=\"#部署到github-pages\">#</a> 部署到 Github Pages</h2>\n<p>在上述操作完成后，我们虽然能够预览博客，但是是一个本地服务只能自己查看，所以需要将博客进行部署部署完成后供其他人访问查看。</p>\n<p>不同于动态博客，静态博客由于其特性，很多服务商都有对应的托管服务 (重点是免费), 比如  <code>Github Pages</code></p>\n<h3 id=\"创建github仓库\"><a class=\"anchor\" href=\"#创建github仓库\">#</a> 创建 Github 仓库</h3>\n<ul>\n<li>在  <code>Github</code>  新建一个仓库</li>\n<li>仓库名必须是 <code>用户名.github.io</code></li>\n<li>仓库名必须是 <code>用户名.github.io</code></li>\n<li>仓库名必须是 <code>用户名.github.io</code></li>\n<li>仓库必须设置为<span class=\"blue\">公开</span>，因为私有的仓库是不提供免费  <code>Page</code>  的功能的，需要每个月额外付费。其实也不需要设置为私有，公开就行。</li>\n</ul>\n<h3 id=\"安装配置hexo-git部署插件\"><a class=\"anchor\" href=\"#安装配置hexo-git部署插件\">#</a> 安装配置 Hexo Git 部署插件</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save</pre></td></tr></tbody></table></figure><p>注意这儿  <code>--save</code>  是保存包配置到 博客目录下  <code>package.json</code>  文件，当你需要多设备编辑自己的博客，通过 git 管理博客配置，在新的机器上  <code>check</code>  直接  <code>npm install</code> , 就不用重新配置了</p>\n<p><strong>编辑配置文件</strong>  <code>_config.yml</code> , <strong>配置上传计划</strong></p>\n<ul>\n<li>拷贝上一步创建仓库的地址</li>\n<li>配置  <code>_config.yml</code> , 新增如下配置<br>\n<img data-src=\"/posts/18163/GitDeployer.png\" alt=\"GitDeployer\" width=\"100%\"></li>\n</ul>\n<h3 id=\"推送hexo博客到仓库\"><a class=\"anchor\" href=\"#推送hexo博客到仓库\">#</a> 推送 Hexo 博客到仓库</h3>\n<p>在三连后追加如下命令，推送 Hexo 博客到远程仓库</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>hexo deployer</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 发布三连</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo generate <span class=\"token operator\">&amp;&amp;</span> hexo deployer</pre></td></tr></tbody></table></figure><h3 id=\"github-pages设置\"><a class=\"anchor\" href=\"#github-pages设置\">#</a> Github Pages 设置</h3>\n<p>选择仓库的  <code>Settings</code>  --&gt;  <code>Pages</code> , 按照下图设置即可，完成后使用  <code>Github用户名.github.io</code>  即可访问自己的博客了</p>\n<p><img data-src=\"/posts/18163/GithubPages.png\" alt=\"GitHubPages\" width=\"100%\"></p>\n<h2 id=\"自定义域名解析\"><a class=\"anchor\" href=\"#自定义域名解析\">#</a> 自定义域名解析</h2>\n<h3 id=\"域名购买\"><a class=\"anchor\" href=\"#域名购买\">#</a> 域名购买</h3>\n<p>国内推荐 <span class=\"blue\">腾讯云</span> 或者 <span class=\"blue\">阿里云</span> 这样的大厂购买，如果不想进行备案也可以选择在国外购买 (这儿就不做推荐了)</p>\n<div class=\"links\"><div class=\"item\" title=\"腾讯云\" style=\"--block-color:#ff4200;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS8=\" data-background-image=\"https://onlyzyx.com/images/webstack/logo/tencentcloud.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS8=\">腾讯云</span>\n          <p class=\"desc\">腾讯云</p>\n          </div></div><div class=\"item\" title=\"阿里云\" style=\"--block-color:#ff4200;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS8=\" data-background-image=\"https://onlyzyx.com/images/webstack/logo/aliyun.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS8=\">阿里云</span>\n          <p class=\"desc\">阿里云</p>\n          </div></div></div>\n<h3 id=\"域名解析到github-pages\"><a class=\"anchor\" href=\"#域名解析到github-pages\">#</a> 域名解析到 Github Pages</h3>\n<p><strong>以腾讯云为例</strong></p>\n<p>假设购买的域名为  <code>onlyzyx.com</code></p>\n<p>前往  <code>控制台</code>  --&gt;   <code>DNS 解析 DNSPod</code>  --&gt;  <code>我的域名</code>  --&gt;  <code>onlyzyx.com</code></p>\n<p><strong>这里一般创建两条解析</strong></p>\n<p><img data-src=\"/posts/18163/dns.png\" alt=\"dns\" width=\"100%\"></p>\n<ol>\n<li><code>@</code>  创建  <code>A</code>  记录解析  <code>onlyzyx.com</code>  到  <code>ping 你的用户名.github.io</code>  显示的 <code>ip</code>  地址</li>\n<li><code>www</code>  创建  <code>CNAME</code>  记录解析  <code>onlyzyx.com</code>  到  <code>你的用户名.github.io</code></li>\n</ol>\n<p>然后前往仓库的  <code>Settings</code>  --&gt;  <code>Pages</code> , 按照下图设置即可，完成后使用  <code>onlyzyx.com</code>  即可访问自己的博客了 (可能稍有延迟，需要等待  <code>DNS</code>  解析生效)</p>\n<p><img data-src=\"/posts/18163/pagesdns.png\" alt=\"PagesDNS\" width=\"100%\"></p>\n</body></html>",
            "tags": [
                "二进制杂谈",
                "Hexo",
                "Hexo"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/50504.html",
            "url": "https://onlyzyx.com/posts/50504.html",
            "title": "LeetCode Programming",
            "date_published": "2018-12-24T07:03:22.000Z",
            "content_html": "<html><head></head><body><h2 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h2>\n<p>四度春秋，弹指间转瞬即逝～</p>\n<p>而今作为一个社会人，感觉自己在死瘦宅的路上愈行愈远，无法自拔～也越来越拖延 (懒癌晚期)</p>\n<p>为了缓解下这种情况，决定没事刷刷题，而 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20v\">LeetCode</span> 就是一个不错的选择 (正好也用新入坑的  <code>GO</code>  语言写写代码试试水)~</p>\n<p>谨以此文记录下  <code>LeetCode</code>  的刷题之路，也算是作为一个个人题解  <code>Orz~</code></p>\n<p><img data-src=\"/posts/50504/LeetCode.png\" alt=\"LeetCode\" width=\"100%\"></p>\n<h3 id=\"技巧处理\"><a class=\"anchor\" href=\"#技巧处理\">#</a> 技巧处理</h3>\n<h4 id=\"c-输入输出加速\"><a class=\"anchor\" href=\"#c-输入输出加速\">#</a> C++ 输入输出加速</h4>\n<p>在刷<strong> LeetCode</strong> 的时候，习惯性看看最优时间的大佬们的解法，偶然发现有些题同样的方法别人运行时间就要低上不少，然后发现这些提交一般都有如下这个  <code>Lambda</code>  表达式。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> __________ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>仔细看了看  <code>LeetCode</code>  对于使用  <code>C++</code>  提交的人，输入输出默认使用的  <code>C++</code>  的  <code>io</code> , 而不是  <code>C</code>  的，上面  <code>Lambda</code>  捕获，则可以用来解除  <code>C++</code>  为了兼容  <code>C</code>  而采取的缓存同步机制，提升  <code>cin</code> ,  <code>cout</code>  的速度</p>\n<p><span class=\"label warning\"><strong>解惑</strong></span>  <code>ios::sync_with_stdio(false)</code></p>\n<p>因为  <code>C++</code>  中的 <code>std::cin</code>  和 <code>std::cout</code>  为了兼容  <code>C</code> , 保证在代码中同时出现  <code>std::cin</code>  和  <code>scanf</code>  或  <code>std::cout</code>  和  <code>printf</code>  时输出不发生混乱，所以  <code>C++</code>  用一个流缓冲区来同步  <code>C</code>  的标准流。通过  <code>std::ios_base::sync_with_stdio</code>  函数可以解除这种同步，让  <code>std::cin</code>  和  <code>std::cout</code>  不再经过缓冲区，自然就节省了许多时间。</p>\n<p><span class=\"label warning\"><strong>解惑</strong></span>  <code>cin.tie(nullptr)</code></p>\n<p><code>std::cin </code> 默认是与  <code>std::cout</code>  绑定的，所以每次操作的时候 (也就是调用  <code>&lt;&lt;</code>  或者  <code>&gt;&gt;</code> ) 都要刷新 (调用 <code>flush</code> ), 这样增加了 IO 的负担，通过  <code>tie(nullptr)</code>  来解除  <code>std::cin</code>  和  <code>std::cout</code>  之间的绑定，来降低  <code>IO</code>  的负担使效率提升。</p>\n<h3 id=\"题解汇总\"><a class=\"anchor\" href=\"#题解汇总\">#</a> 题解汇总</h3>\n<p>沉潜深度源自始终如一的专注。人的生命是有限的，精力是有限的，只有专注才能将人的力量发挥到极致。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">题解链接</th>\n<th style=\"text-align:left\">题目名称</th>\n<th style=\"text-align:center\">难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/41700.html\">0001: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Two Sum</td>\n<td style=\"text-align:center\"><strong><font color=\"green\">Easy</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/61027.html\">0002: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Add Two Numbers</td>\n<td style=\"text-align:center\"><strong><font color=\"orange\">Medium</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/22084.html\">0003: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Longest Substring Without Repeating Characters</td>\n<td style=\"text-align:center\"><strong><font color=\"orange\">Medium</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/20354.html\">0004: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Median of Two Sorted Arrays</td>\n<td style=\"text-align:center\"><strong><font color=\"red\">Hard</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/38941.html\">0005: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Longest Palindromic Substring</td>\n<td style=\"text-align:center\"><strong><font color=\"orange\">Medium</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/11811.html\">0006: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">ZigZag Conversion</td>\n<td style=\"text-align:center\"><strong><font color=\"orange\">Medium</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/23255.html\">0007: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Reverse Integer</td>\n<td style=\"text-align:center\"><strong><font color=\"green\">Easy</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/33328.html\">0008: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">String to Integer (atoi)</td>\n<td style=\"text-align:center\"><strong><font color=\"orange\">Medium</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/11300.html\">0009: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Palindrome Number</td>\n<td style=\"text-align:center\"><strong><font color=\"green\">Easy</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/36873.html\">0010: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Regular Expression Matching</td>\n<td style=\"text-align:center\"><strong><font color=\"red\">Hard</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/55924.html\">0011: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Container With Most Water</td>\n<td style=\"text-align:center\"><strong><font color=\"orange\">Medium</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/57953.html\">0012: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Integer to Roman</td>\n<td style=\"text-align:center\"><strong><font color=\"orange\">Medium</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/29292.html\">0013: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Roman to Integer</td>\n<td style=\"text-align:center\"><strong><font color=\"green\">Easy</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/43625.html\">0014: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Longest Common Prefix</td>\n<td style=\"text-align:center\"><strong><font color=\"green\">Easy</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/29404.html\">0015: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">3Sum</td>\n<td style=\"text-align:center\"><strong><font color=\"orange\">Medium</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/15006.html\">0016: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">3Sum Closest</td>\n<td style=\"text-align:center\"><strong><font color=\"orange\">Medium</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/15109.html\">0017: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Letter Combinations of a Phone Number</td>\n<td style=\"text-align:center\"><strong><font color=\"orange\">Medium</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/53762.html\">0018: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">4Sum</td>\n<td style=\"text-align:center\"><strong><font color=\"orange\">Medium</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/24206.html\">0019: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Remove Nth Node From End of List</td>\n<td style=\"text-align:center\"><strong><font color=\"orange\">Medium</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/15005.html\">0020: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Valid Parentheses</td>\n<td style=\"text-align:center\"><strong><font color=\"green\">Easy</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/12203.html\">0021: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Merge Two Sorted Lists</td>\n<td style=\"text-align:center\"><strong><font color=\"green\">Easy</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/21073.html\">0022: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Generate Parentheses</td>\n<td style=\"text-align:center\"><strong><font color=\"orange\">Medium</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/49608.html\">0023: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Merge k Sorted Lists</td>\n<td style=\"text-align:center\"><strong><font color=\"red\">Hard</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/32594.html\">0024: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Swap Nodes in Pairs</td>\n<td style=\"text-align:center\"><strong><font color=\"orange\">Medium</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/15344.html\">0025: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Reverse Nodes in k-Group</td>\n<td style=\"text-align:center\"><strong><font color=\"red\">Hard</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/32706.html\">0026: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Remove Duplicates from Sorted Array</td>\n<td style=\"text-align:center\"><strong><font color=\"green\">Easy</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/13804.html\">0027: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Remove Element</td>\n<td style=\"text-align:center\"><strong><font color=\"green\">Easy</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/22387.html\">0028: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Implement strStr()</td>\n<td style=\"text-align:center\"><strong><font color=\"green\">Easy</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/23610.html\">0029: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Divide Two Integers</td>\n<td style=\"text-align:center\"><strong><font color=\"orange\">Medium</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/14289.html\">0030: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Substring with Concatenation of All Words</td>\n<td style=\"text-align:center\"><strong><font color=\"red\">Hard</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/48735.html\">0031: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Next Permutation</td>\n<td style=\"text-align:center\"><strong><font color=\"green\">Easy</font></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://onlyzyx.com/posts/65323.html\">0032: 传送门 Click Here!</a></td>\n<td style=\"text-align:left\">Longest Valid Parentheses</td>\n<td style=\"text-align:center\"><strong><font color=\"red\">Hard</font></strong></td>\n</tr>\n</tbody>\n</table>\n</body></html>",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/65323.html",
            "url": "https://onlyzyx.com/posts/65323.html",
            "title": "LeetCode_32: Longest Valid Parentheses",
            "date_published": "2018-12-24T07:02:38.000Z",
            "content_html": "<html><head></head><body><h2 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h2>\n<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbG9uZ2VzdC12YWxpZC1wYXJlbnRoZXNlcy8=\">https://leetcode.com/problems/longest-valid-parentheses/</span></p>\n<h2 id=\"题目大意\"><a class=\"anchor\" href=\"#题目大意\">#</a> 题目大意</h2>\n<p>给定一个只包含字符 '(' 和 ')' 的字符串，找到最长的有效 (括号配对) 括号子字符串的长度。</p>\n<ul>\n<li><strong>Example</strong></li>\n</ul>\n<pre><code>Input: \"(()\"\nOutput: 2\nExplanation: The longest valid parentheses substring is \"()\"\n\nInput: \")()())\"\nOutput: 4\nExplanation: The longest valid parentheses substring is \"()()\"\n</code></pre>\n<h2 id=\"题解\"><a class=\"anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>明确一个要点，一个匹配的字符串一定是以  <code>')'</code>  结尾</p>\n<p>假设  <code>dp[i]</code>  表示从字符串开头以第 i 位结尾的子字符串的最大匹配长度，每次读取到为  <code>')'</code>  的字符串只需要判断第  <code>i-1-dp[i-1]</code>  对应索引是否为  <code>'('</code>  即可</p>\n<p>于是有如下状态转移方程</p>\n<pre><code>dp[i] = dp[i-1] + 2 ( s[i] == ')' &amp;&amp; s[i-1-dp[i-1]]=='(' )\ndp[i] += dp[i - dp[i]];\n\n递归边界dp[0] = 0\n</code></pre>\n<p>再进行 dp 时注意维护最大值即可，为了避免越界情况，博主采取在目标字符串头部添加一个无效字符。</p>\n<h2 id=\"复杂度\"><a class=\"anchor\" href=\"#复杂度\">#</a> 复杂度</h2>\n<p>时间复杂度  <code>O(n)</code></p>\n<p>空间复杂度  <code>O(n)</code></p>\n<h2 id=\"ac代码\"><a class=\"anchor\" href=\"#ac代码\">#</a> AC 代码</h2>\n<p><code>c++</code>  版本</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">longestValidParentheses</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        string prefixs <span class=\"token operator\">=</span> <span class=\"token string\">\"#\"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>prefixs<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> prefixs<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 更新</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prefixs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prefixs<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            ans <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>go</code>  版本</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">longestValidParentheses</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tprefixs <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tans<span class=\"token punctuation\">,</span> lens<span class=\"token punctuation\">,</span> dp <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>prefixs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>prefixs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lens<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> prefixs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">')'</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> prefixs<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'('</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> ans <span class=\"token operator\">&lt;</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\tans <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> ans</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/48735.html",
            "url": "https://onlyzyx.com/posts/48735.html",
            "title": "LeetCode_31: Next Permutation",
            "date_published": "2018-11-02T06:40:04.000Z",
            "content_html": "<html><head></head><body><h2 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h2>\n<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbmV4dC1wZXJtdXRhdGlvbi8=\">https://leetcode.com/problems/next-permutation/</span></p>\n<h2 id=\"题目大意\"><a class=\"anchor\" href=\"#题目大意\">#</a> 题目大意</h2>\n<p>给出一个序列实现下一个排列，它将数字重新排列成满足字典序的下一个更大的数字排列</p>\n<p>如果下一个排列不可能 (已经是最大的了), 则必须将其重新排列为尽可能低的顺序 (即按升序排序)</p>\n<fieldset><legend><strong><font color=\"purple\">Hint</font></strong></legend>更换必须就地, 并且只使用恒定的额外内存</fieldset>\n<ul>\n<li><strong>Example</strong></li>\n</ul>\n<pre><code>1,2,3 → 1,3,2\n3,2,1 → 1,2,3\n1,1,5 → 1,5,1\n</code></pre>\n<h2 id=\"题解\"><a class=\"anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>此题其实求解下一个全排列</p>\n<p>假设集合 nums 当前全排列情况为 <code>[3, 7, 6, 2, 5, 4, 3, 1]</code>  求取下一个排列的步骤如下：</p>\n<pre><code>/*\n * current: 3   7  6  2  5  4  3  1  .\n *                    |  |     |     |\n *          find i----+  j     k     +----end\n * swap i and k :\n *          3   7  6  3  5  4  2  1  .\n *                    |  |     |     |\n *               i----+  j     k     +----end\n * reverse j to end :\n *          3   7  6  3  1  2  4  5  .\n *                    |  |     |     |\n *          find i----+  j     k     +----end\n */\n</code></pre>\n<p>步骤解读：</p>\n<ol>\n<li><strong>从后向前查找第一个相邻元素对 (i,j), 并且满足 nums [i] &lt; nums [j]。</strong>显然，此时从 j 到 end 必然是降序。</li>\n<li><strong>在 [j,end) 中寻找一个最小的 k 使其满足 nums [i] &lt; nums [k]。</strong>由于 [j,end) 是降序的，所以必然存在一个 k 满足上面条件；并且可以从后向前查找第一个满足 nums [i] &lt; nums [k] 关系的 k, 此时的 k 必是待找的 k。</li>\n<li><strong>将 i 与 k 交换</strong>。此时，i 处变成比 i 大的最小元素，因为下一个全排列必须是与当前排列按照升序排序相邻的排列，故选择最小的元素替代 i, 交换后的 [j,end) 仍然满足降序排序。因为在 (k,end) 中必然小于 i, 在 [j,k) 中必然大于 k, 并且大于 i。</li>\n<li><strong>逆置 [j,end)</strong>, 由于此时 [j,end) 是降序的，故将其逆置，最终获得下一个全排列。</li>\n</ol>\n<p><strong><font color=\"purple\">Hint: </font></strong>如果在步骤 1 找不到符合的相邻元素对，即此时 i=begin, 则说明当前 [begin,end) 为一个降序顺序，即无下一个全排列，按照题意直接将整个排列逆置成升序</p>\n<h2 id=\"复杂度\"><a class=\"anchor\" href=\"#复杂度\">#</a> 复杂度</h2>\n<p>时间复杂度  <code>O(n)</code></p>\n<p>空间复杂度  <code>O(1)</code></p>\n<h2 id=\"ac代码\"><a class=\"anchor\" href=\"#ac代码\">#</a> AC 代码</h2>\n<p><code>c++</code>  版本</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">nextPermutation</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator iter_i <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator iter_j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token double-colon punctuation\">::</span>iterator iter_k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iter_i <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            iter_j <span class=\"token operator\">=</span> iter_i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter_i <span class=\"token operator\">&lt;</span> <span class=\"token operator\">*</span>iter_j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                iter_k <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter_i <span class=\"token operator\">&lt;</span> <span class=\"token operator\">*</span><span class=\"token operator\">--</span>iter_k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token function\">iter_swap</span><span class=\"token punctuation\">(</span>iter_i<span class=\"token punctuation\">,</span> iter_k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>iter_j<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>go</code>  版本</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">nextPermutation</span><span class=\"token punctuation\">(</span>nums <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tlens <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> lens <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\ti <span class=\"token operator\">:=</span> lens <span class=\"token operator\">-</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\ti<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tj <span class=\"token operator\">:=</span> lens <span class=\"token operator\">-</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tj<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tnums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tj <span class=\"token operator\">:=</span> lens <span class=\"token operator\">-</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">&lt;</span> j <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tnums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\ti<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tj<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/14289.html",
            "url": "https://onlyzyx.com/posts/14289.html",
            "title": "LeetCode_30: Substring with Concatenation of All Words",
            "date_published": "2018-10-29T19:37:49.000Z",
            "content_html": "<html><head></head><body><h2 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h2>\n<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc3Vic3RyaW5nLXdpdGgtY29uY2F0ZW5hdGlvbi1vZi1hbGwtd29yZHMv\">https://leetcode.com/problems/substring-with-concatenation-of-all-words/</span></p>\n<h2 id=\"题目大意\"><a class=\"anchor\" href=\"#题目大意\">#</a> 题目大意</h2>\n<p>给出一个长字符串 s 和一个字符串数组 words, 返回由 words 中字符串拼接成的长字符串 (假设为 x) 在 s 中的索引集合 (x 由 words 中所有元素拼接而成，每一个元素都包含且只有一个)</p>\n<fieldset><legend><strong><font color=\"purple\">Hint</font></strong></legend>------------------\n<ol>\n<li>\n<p>words 中的每个字符串长度相等</p>\n</li>\n<li>\n<p>words 中的字符串可以重复 (自己脑补了一波，坑 skr 人 T_T)</p>\n</li>\n</ol>\n</fieldset>\n<ul>\n<li><strong>Example</strong></li>\n</ul>\n<pre><code>Input:\n  s = \"barfoothefoobarman\",\n  words = [\"foo\",\"bar\"]\n\nOutput: [0,9]\n\nInput:\n s = \"wordgoodgoodgoodbestword\"\n words = [\"word\",\"good\",\"best\",\"good\"]\n\nOutput: [8]\n</code></pre>\n<h2 id=\"题解\"><a class=\"anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>这个题目其实和 LeetCode 的第三题<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbG9uZ2VzdC1zdWJzdHJpbmctd2l0aG91dC1yZXBlYXRpbmctY2hhcmFjdGVycy9kZXNjcmlwdGlvbi8=\"> Substring Without Repeating Characters</span> 的解题思路核心是一样的，可以看看博主之前的题解 <a href=\"https://onlyzyx.com/posts/22084.html\">传送门 Click Here!</a> 都是利用滑动窗口的思想。</p>\n<p>来分析下两道题题目的区别，第三题求的是连续的最长的不包含重复字符的子串长度，这道题目求解由 words 中字符串拼接成的长字符串 x 在 s 中的索引位置集合。转换一下，就是 s 中查找连续的一段字符串 x, 这个字符串由 words 中所有字符串拼接而成，把所有符合条件的索引记录返回即可。 所以两者本质上是一致的。</p>\n<p>由于本题 words 中所有字符串长度一致 (假设为 len), 所以可以把 len 当做一个整体。设定滑动窗口包含的子串由 words 中单词拼接而成 (当前从某个起点开始正在查询并且不断扩展的子串), 采取如下步骤解题</p>\n<ol>\n<li>申明一个 hashmap, 用 words 中的字符串作为 key 在 words 中出现次数作为 value, 构建比对映射表。</li>\n<li>设定当前滑动窗口左边界 lastDiffIndex, 初始为 0</li>\n<li>申明一个 curhashmap 表示已经匹配查询列表，查询长度为 len 的子串 sub 在 hashmap 中是否存在\n<ol>\n<li>不存在：表明当前滑动窗口不符合规范，不能由 words 中所有字符串凭拼接构成，直接设置滑动窗口左边界为当前下标</li>\n<li>存在：(1) curhashmap 中的键值对对应数量小于 hashmap 查询子串有效，滑动窗口左边界不变对应 curhashmap 对应键值数量加一，继续查询下一个长度为 len 的子串 sub, (2) curhashmap 中的键值对对应数量大于等于 hashmap 查询子串，无效，移动滑动窗口左边界每次加 len 的跨度，知道当前查询子串 sub 对应键值数量小于等于 hashmap</li>\n</ol>\n</li>\n</ol>\n<p>这样可以做到每次跨度为 words 中单个字符串长度 len, 为了能够遍历到所有单词组合，一般来说会选择双层循环外层每次 + 1 再次遍历，但是本题 words 中字符串长度一致，每次跨度都是 len, 所以只需要 + 1 往后偏移 len-1 次进行跨度为 len 的完全遍历即可覆盖 s 中的所有字符，因为再次偏移到 len 实际上已经进入了下一个周期循环完全重复。</p>\n<p>因此本题采用双层循环，外层 i = [0-len] 跨度为 1, 内层 j = [i, lens-len] 跨度为 len, 每次截取长度为 [j,j+len] 之间的字符串判断，总遍历次数 为 len*n/len=n</p>\n<h2 id=\"复杂度\"><a class=\"anchor\" href=\"#复杂度\">#</a> 复杂度</h2>\n<p>时间复杂度  <code>O(n)</code></p>\n<p>空间复杂度  <code>O(km)</code> , k 为给出的单词序列的长度，m 为序列中每个单词的长度</p>\n<h2 id=\"ac代码\"><a class=\"anchor\" href=\"#ac代码\">#</a> AC 代码</h2>\n<p><code>c++</code>  版本</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">findSubstring</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>words<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// invalid</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        unordered_map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> hashMap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        unordered_map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> curhashxMap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string word <span class=\"token operator\">:</span> words<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token operator\">++</span>hashMap<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> lenS <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span> lenWord <span class=\"token operator\">=</span> words<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span> lens <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">int</span> lastDiffIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lenWord<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            curhashxMap<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            lastDiffIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> lenS <span class=\"token operator\">-</span> lenWord<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> lenWord<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                string tmp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> lenWord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    curhashxMap<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    lastDiffIndex <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> lenWord<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token operator\">++</span>curhashxMap<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curhashxMap<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> hashMap<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lens <span class=\"token operator\">==</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                        ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>lastDiffIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                        <span class=\"token operator\">--</span>curhashxMap<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>lastDiffIndex<span class=\"token punctuation\">,</span> lenWord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                        <span class=\"token operator\">--</span>count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        lastDiffIndex <span class=\"token operator\">+=</span> lenWord<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curhashxMap<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> hashMap<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                        <span class=\"token operator\">--</span>curhashxMap<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>lastDiffIndex<span class=\"token punctuation\">,</span> lenWord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                        <span class=\"token operator\">--</span>count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                        lastDiffIndex <span class=\"token operator\">+=</span> lenWord<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>go</code>  版本</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">findSubstring</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> words <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tlenS<span class=\"token punctuation\">,</span> lenWords <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">==</span> lenS <span class=\"token operator\">||</span> <span class=\"token number\">0</span> <span class=\"token operator\">==</span> lenWords <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\thashMap<span class=\"token punctuation\">,</span> curHashMap <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">var</span> ret <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tlenword <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> words <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\thashMap<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lenword<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcurHashMap <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tlastDiffIndex<span class=\"token punctuation\">,</span> count <span class=\"token operator\">:=</span> i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> lenS<span class=\"token operator\">-</span>lenword<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> lenword <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\ttmp <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">[</span>j <span class=\"token punctuation\">:</span> j<span class=\"token operator\">+</span>lenword<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> hashMap<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> ok <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\tcurHashMap <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\tlastDiffIndex<span class=\"token punctuation\">,</span> count <span class=\"token operator\">=</span> j<span class=\"token operator\">+</span>lenword<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\tcurHashMap<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\tcount<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> curHashMap<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> hashMap<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> lenWords <span class=\"token operator\">==</span> count <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> lastDiffIndex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\t\tcurHashMap<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>lastDiffIndex<span class=\"token punctuation\">:</span>lastDiffIndex<span class=\"token operator\">+</span>lenword<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t\tcount<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t\tlastDiffIndex <span class=\"token operator\">+=</span> lenword</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">for</span> curHashMap<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> hashMap<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t\tcurHashMap<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>lastDiffIndex<span class=\"token punctuation\">:</span>lastDiffIndex<span class=\"token operator\">+</span>lenword<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\t\tcount<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\t\tlastDiffIndex <span class=\"token operator\">+=</span> lenword</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret</pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/23610.html",
            "url": "https://onlyzyx.com/posts/23610.html",
            "title": "LeetCode_29: Divide Two Integers",
            "date_published": "2018-10-27T05:53:24.000Z",
            "content_html": "<html><head></head><body><h2 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h2>\n<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZGl2aWRlLXR3by1pbnRlZ2Vycy8=\">https://leetcode.com/problems/divide-two-integers/</span></p>\n<h2 id=\"题目大意\"><a class=\"anchor\" href=\"#题目大意\">#</a> 题目大意</h2>\n<p>给定一个除数和被除数，要求不使用除法、乘法以及取模操作计算。返回两个数做除法的商 (结果取整数，就相当于两个 int 做计算)</p>\n<fieldset><legend><strong><font color=\"purple\">Hint</font></strong></legend>\n1. 被除数和除数都是32位整数(int32)<br>\n2. 除数永远不可能为0<br>\n3. 本题运行环境只能存储int32类型, 如果计算结果溢出, 返回2^31 − 1\n</fieldset>\n<ul>\n<li><strong>Example</strong></li>\n</ul>\n<pre><code>Input: dividend = 10, divisor = 3\nOutput: 3\n\nInput: dividend = 7, divisor = -3\nOutput: -2\n</code></pre>\n<h2 id=\"题解\"><a class=\"anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>题目规定了无法使用乘除法取模运算，因此就只有考虑加减法和位运算了。</p>\n<p>假设商为 s, 余数为 r, 则有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>d</mi><mo>=</mo><mi>d</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>s</mi><mi>o</mi><mi>r</mi><mo>∗</mo><mi>s</mi><mo>+</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">dividend=divisor*s+r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span></p>\n<p>一个比较朴素的想法就是一直用被除数 (dividend) 减去除数 (divisor), 直到某一次结果小于除数的时候，总共操作的减法次数就是商 s 的值。但是这样当被除数很大，除数很小的时候，进行减法操作次数会很多，运算就会超时。</p>\n<p>可行的方法就是减少做减法的次数，有如下操作过程</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>=</mo><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">s=2^0+2^1+...2^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>d</mi><mo>=</mo><mi>d</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>s</mi><mi>o</mi><mi>r</mi><mtext>∗</mtext><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><msup><mn>2</mn><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mo>+</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">dividend=divisor∗(2^0+2^1+...+2^k)+r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">∗</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span></p>\n<p>每一次确定当前等式的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">dividend</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span></span></span></span> 减去<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>i</mi><mi>c</mi><mi>i</mi><mi>s</mi><mi>o</mi><mi>r</mi><mo>∗</mo><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">dicisor*2^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span> 等于减去这个数等效的做减法次数，至于求解<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span>, 一个高效的方法可以通过位移运算实现，即原等式与如下等式等价</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>d</mi><mo>=</mo><mi>d</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>s</mi><mi>o</mi><mi>r</mi><mo>&lt;</mo><mo>&lt;</mo><mn>0</mn><mo>+</mo><mi>d</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>s</mi><mi>o</mi><mi>r</mi><mo>&lt;</mo><mo>&lt;</mo><mn>1</mn><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><mi>d</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>s</mi><mi>o</mi><mi>r</mi><mo>&lt;</mo><mo>&lt;</mo><mi>k</mi><mo>+</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">dividend=divisor&lt;&lt;0+divisor&lt;&lt;1+...+divisor&lt;&lt;k+r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span></p>\n<h2 id=\"复杂度\"><a class=\"anchor\" href=\"#复杂度\">#</a> 复杂度</h2>\n<p>时间复杂度  <code>O((logn)^2)</code> , n 等于被除数的位数</p>\n<p>空间复杂度  <code>O(1)</code></p>\n<h2 id=\"ac代码\"><a class=\"anchor\" href=\"#ac代码\">#</a> AC 代码</h2>\n<p><code>c++</code>  版本</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dividend<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> divisor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> divisor <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>INT32_MIN <span class=\"token operator\">==</span> dividend <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> divisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> INT32_MAX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> divisor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> dividend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">bool</span> negative <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>divisor <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">long</span> ldividend <span class=\"token operator\">=</span> <span class=\"token function\">labs</span><span class=\"token punctuation\">(</span>dividend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">long</span> ldivisor <span class=\"token operator\">=</span> <span class=\"token function\">labs</span><span class=\"token punctuation\">(</span>divisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ldividend <span class=\"token operator\">&gt;=</span> ldivisor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">long</span> k <span class=\"token operator\">=</span> ldivisor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">long</span> r <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ldividend <span class=\"token operator\">&gt;=</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                k <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                r <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            ldividend <span class=\"token operator\">-=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            ret <span class=\"token operator\">+=</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">==</span> negative <span class=\"token operator\">?</span> <span class=\"token operator\">-</span>ret <span class=\"token operator\">:</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>go</code>  版本</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tINT32_MAX <span class=\"token operator\">=</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">^</span><span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tINT32_MIN <span class=\"token operator\">=</span> <span class=\"token operator\">^</span>INT32_MAX</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">labs</span><span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int64</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>x</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>dividend <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> divisor <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">==</span> divisor <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>INT32_MIN <span class=\"token operator\">==</span> dividend <span class=\"token operator\">&amp;&amp;</span> divisor <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> INT32_MAX</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> divisor <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> dividend</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tret <span class=\"token operator\">:=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tldividend<span class=\"token punctuation\">,</span> ldivisor <span class=\"token operator\">:=</span> <span class=\"token function\">labs</span><span class=\"token punctuation\">(</span><span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>dividend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">labs</span><span class=\"token punctuation\">(</span><span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>divisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">for</span> ldividend <span class=\"token operator\">&gt;=</span> ldivisor <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tk<span class=\"token punctuation\">,</span> r <span class=\"token operator\">:=</span> ldivisor<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> ldividend <span class=\"token operator\">&gt;=</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\tk <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tr <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tret <span class=\"token operator\">+=</span> r</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tldividend <span class=\"token operator\">-=</span> k</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> divisor <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> divisor <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> ret</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>ret</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/22387.html",
            "url": "https://onlyzyx.com/posts/22387.html",
            "title": "LeetCode_28: Implement strStr()",
            "date_published": "2018-10-25T23:18:23.000Z",
            "content_html": "<html><head></head><body><h2 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h2>\n<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvaW1wbGVtZW50LXN0cnN0ci8=\">https://leetcode.com/problems/implement-strstr/</span></p>\n<h2 id=\"题目大意\"><a class=\"anchor\" href=\"#题目大意\">#</a> 题目大意</h2>\n<p>实现 <code>strStr()</code></p>\n<p>返回 haystack 中第一次出现模式串的索引，如果模式串不是 haystack 的一部分，则返回 - 1。</p>\n<p><strong><font color=\"purple\">Hint: </font></strong>当模式串为空的时候，返回 0 (没看到这个居然被坑了 T_T)</p>\n<ul>\n<li><strong>Example</strong></li>\n</ul>\n<pre><code>Input: haystack = \"hello\", needle = \"ll\"\nOutput: 2\n\nInput: haystack = \"aaaaa\", needle = \"bba\"\nOutput: -1\n</code></pre>\n<h2 id=\"题解\"><a class=\"anchor\" href=\"#题解\">#</a> 题解</h2>\n<h3 id=\"一句话题解\"><a class=\"anchor\" href=\"#一句话题解\">#</a> 一句话题解</h3>\n<p>KMP 算法，关于 KMP 算法推荐一篇感觉讲的很有灵魂的博客！<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1dGlhbnp1aWppbi9hcnRpY2xlL2RldGFpbHMvMTE5NTQ5Mzk=\">Click Here!</span></p>\n<h2 id=\"复杂度\"><a class=\"anchor\" href=\"#复杂度\">#</a> 复杂度</h2>\n<p>时间复杂度  <code>O(n+m)</code></p>\n<p>空间复杂度  <code>O(m)</code> , m 代表模式串 (需要匹配的字符串) 的长度</p>\n<h2 id=\"ac代码\"><a class=\"anchor\" href=\"#ac代码\">#</a> AC 代码</h2>\n<p><code>c++</code>  版本</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">strStr</span><span class=\"token punctuation\">(</span>string haystack<span class=\"token punctuation\">,</span> string needle<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>next <span class=\"token operator\">=</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> haystack<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> needle<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> needle<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                ret <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>needle<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> needle<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> needle<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            next<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> needle<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> needle<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token operator\">++</span>j <span class=\"token operator\">:</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">return</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>go</code>  版本</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>needle <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tlens <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tnext <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> lens<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lens<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> needle<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> needle<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\tj <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> needle<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> needle<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\tj<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tnext<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> next</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">strStr</span><span class=\"token punctuation\">(</span>haystack <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> needle <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tlen1 <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">if</span> len1 <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tret<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">,</span> len2 <span class=\"token operator\">:=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len2<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> haystack<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> needle<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\tj <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> haystack<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> needle<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\tj<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> j <span class=\"token operator\">==</span> len1 <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/13804.html",
            "url": "https://onlyzyx.com/posts/13804.html",
            "title": "LeetCode_27: Remove Element",
            "date_published": "2018-10-24T20:07:15.000Z",
            "content_html": "<html><head></head><body><h2 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h2>\n<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVtb3ZlLWVsZW1lbnQv\">https://leetcode.com/problems/remove-element/</span></p>\n<h2 id=\"题目大意\"><a class=\"anchor\" href=\"#题目大意\">#</a> 题目大意</h2>\n<p>给定数组 nums 和值 val, 在适当位置删除该值的所有实例并返回新长度。</p>\n<p><strong><font color=\"purple\">Hint: </font></strong>不要为另一个数组分配额外的空间，必须通过使用 O (1) 额外内存修改输入数组来实现此目的。元素的顺序可以改变.</p>\n<ul>\n<li><strong>Example</strong></li>\n</ul>\n<pre><code>Given nums = [3,2,2,3], val = 3,\nYour function should return length = 2, with the first two elements of nums being 2.\n\n\nGiven nums = [0,1,2,2,3,0,4,2], val = 2,\nYour function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.\nNote that the order of those five elements can be arbitrary.\n\nIt doesn't matter what values are set beyond the returned length.\n</code></pre>\n<h2 id=\"题解\"><a class=\"anchor\" href=\"#题解\">#</a> 题解</h2>\n<h3 id=\"一句话题解\"><a class=\"anchor\" href=\"#一句话题解\">#</a> 一句话题解</h3>\n<p>利用原数组，遍历的同时将遍历数据放到元素组头部，跳过数值等于给定数值 val 的所有元素即可</p>\n<h2 id=\"复杂度\"><a class=\"anchor\" href=\"#复杂度\">#</a> 复杂度</h2>\n<p>时间复杂度  <code>O(n)</code></p>\n<p>空间复杂度  <code>O(1)</code></p>\n<h2 id=\"ac代码\"><a class=\"anchor\" href=\"#ac代码\">#</a> AC 代码</h2>\n<p><code>c++</code>  版本</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                nums<span class=\"token punctuation\">[</span>res<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>go</code>  版本</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span>nums <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> val <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">var</span> res <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> val <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\tnums<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\tres<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/32706.html",
            "url": "https://onlyzyx.com/posts/32706.html",
            "title": "LeetCode_26: Remove Duplicates from Sorted Array",
            "date_published": "2018-10-24T19:47:38.000Z",
            "content_html": "<html><head></head><body><h2 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h2>\n<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVtb3ZlLWR1cGxpY2F0ZXMtZnJvbS1zb3J0ZWQtYXJyYXkv\">https://leetcode.com/problems/remove-duplicates-from-sorted-array/</span></p>\n<h2 id=\"题目大意\"><a class=\"anchor\" href=\"#题目大意\">#</a> 题目大意</h2>\n<p>给定排序的数组 nums, 就地删除重复项，使每个元素只出现一次并返回新的长度。</p>\n<p><strong><font color=\"purple\">Hint: </font></strong>不要为另一个数组分配额外的空间，必须通过使用 O (1) 额外内存修改输入数组来实现此目的。</p>\n<ul>\n<li><strong>Example</strong></li>\n</ul>\n<pre><code>Given nums = [1,1,2],\nYour function should return length = 2, with the first two elements of nums being 1 and 2 respectively.\nIt doesn't matter what you leave beyond the returned length.\n\nGiven nums = [0,0,1,1,1,2,2,3,3,4],\nYour function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.\nIt doesn't matter what values are set beyond the returned length.\n</code></pre>\n<h2 id=\"题解\"><a class=\"anchor\" href=\"#题解\">#</a> 题解</h2>\n<h3 id=\"一句话题解\"><a class=\"anchor\" href=\"#一句话题解\">#</a> 一句话题解</h3>\n<p>O (1) 空间复杂度要求，即利用原数组，顺序遍历数组，把不重复的项放在数组头部即可。维持一个 index 用于存储下标，直接顺序遍历，找到数组当前数据与前一个数据不一致即出现一个新数字，放在当前 index+1 的位置即可。</p>\n<h2 id=\"复杂度\"><a class=\"anchor\" href=\"#复杂度\">#</a> 复杂度</h2>\n<p>时间复杂度  <code>O(n)</code></p>\n<p>空间复杂度  <code>O(1)</code></p>\n<h2 id=\"ac代码\"><a class=\"anchor\" href=\"#ac代码\">#</a> AC 代码</h2>\n<p><code>c++</code>  版本</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">removeDuplicates</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token operator\">++</span>ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                nums<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>go</code>  版本</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">removeDuplicates</span><span class=\"token punctuation\">(</span>nums <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tlens <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">==</span> lens <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tret<span class=\"token punctuation\">,</span> index <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lens<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\tret<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\tnums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tindex<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/15344.html",
            "url": "https://onlyzyx.com/posts/15344.html",
            "title": "LeetCode_25: Reverse Nodes in k-Group",
            "date_published": "2018-10-23T21:03:19.000Z",
            "content_html": "<html><head></head><body><h2 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h2>\n<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmV2ZXJzZS1ub2Rlcy1pbi1rLWdyb3VwLw==\">https://leetcode.com/problems/reverse-nodes-in-k-group/</span></p>\n<h2 id=\"题目大意\"><a class=\"anchor\" href=\"#题目大意\">#</a> 题目大意</h2>\n<p>给定一个链表，一次反转链表的 k 个节点 (每 k 个节点翻转一次), 最后返回修改后的列表。</p>\n<p><strong><font color=\"purple\">Hint: </font></strong>k 是正整数，并且小于或等于链表的长度。如果节点数不是 k 的倍数，那么最后的剩余节点应该保持不变。</p>\n<ul>\n<li><strong>Example</strong></li>\n</ul>\n<pre><code>Given this linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5\nFor k = 2, you should return: 2-&gt;1-&gt;4-&gt;3-&gt;5\nFor k = 3, you should return: 3-&gt;2-&gt;1-&gt;4-&gt;5\n</code></pre>\n<h2 id=\"题解\"><a class=\"anchor\" href=\"#题解\">#</a> 题解</h2>\n<h3 id=\"一句话题解\"><a class=\"anchor\" href=\"#一句话题解\">#</a> 一句话题解</h3>\n<p>这题算是 24 题<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc3dhcC1ub2Rlcy1pbi1wYWlycy8=\"> Swap Nodes in Pairs</span> 的进阶版本。使用快慢指针，先行指针先走 k 步，就地转置慢指针与快指针之间的节点，最后处理整个翻转链，重复这个过程直至结束</p>\n<h2 id=\"复杂度\"><a class=\"anchor\" href=\"#复杂度\">#</a> 复杂度</h2>\n<p>时间复杂度  <code>O(kn)</code> , k 是需要翻转的区间长度</p>\n<p>空间复杂度  <code>O(1)</code></p>\n<h2 id=\"ac代码\"><a class=\"anchor\" href=\"#ac代码\">#</a> AC 代码</h2>\n<p><code>c++</code>  版本</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct ListNode {</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     ListNode *next;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     ListNode(int x) : val(x), next(NULL) {}</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * };</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ListNode <span class=\"token operator\">*</span><span class=\"token function\">reverseKGroup</span><span class=\"token punctuation\">(</span>ListNode <span class=\"token operator\">*</span>head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>ret <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        ret<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>fast <span class=\"token operator\">=</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>slow <span class=\"token operator\">=</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>tmp1<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>tmp2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span> <span class=\"token operator\">!=</span> fast <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">!=</span> fast<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">!=</span> fast<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token operator\">--</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            tmp1 <span class=\"token operator\">=</span> fast<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            tmp2 <span class=\"token operator\">=</span> slow<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token function\">reverseIntervalList</span><span class=\"token punctuation\">(</span>slow<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">,</span> fast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            slow<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> tmp1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            slow<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            slow <span class=\"token operator\">=</span> fast <span class=\"token operator\">=</span> tmp2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">reverseIntervalList</span><span class=\"token punctuation\">(</span>ListNode <span class=\"token operator\">*</span>begin<span class=\"token punctuation\">,</span> ListNode <span class=\"token operator\">*</span>end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>pre <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>cur <span class=\"token operator\">=</span> begin<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pre <span class=\"token operator\">!=</span> end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            tmp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            cur <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>go</code>  版本</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * type ListNode struct {</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     Val int</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     Next *ListNode</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * }</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">reverseIntervalList</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end <span class=\"token operator\">*</span>ListNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tpre<span class=\"token punctuation\">,</span> cur <span class=\"token operator\">:=</span> begin<span class=\"token punctuation\">,</span> begin<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">var</span> tmp <span class=\"token operator\">*</span>ListNode</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> pre <span class=\"token operator\">!=</span> end <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\ttmp <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcur<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> pre</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tpre <span class=\"token operator\">=</span> cur</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tcur <span class=\"token operator\">=</span> tmp</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">reverseKGroup</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">*</span>ListNode<span class=\"token punctuation\">,</span> k <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ListNode <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tret <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>ListNode<span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tret<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> head</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tfast<span class=\"token punctuation\">,</span> slow <span class=\"token operator\">:=</span> ret<span class=\"token punctuation\">,</span> ret</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">var</span> tmp1<span class=\"token punctuation\">,</span> tmp2 <span class=\"token operator\">*</span>ListNode</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">!=</span> fast <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">!=</span> fast<span class=\"token punctuation\">.</span>Next <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tn <span class=\"token operator\">:=</span> k</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">!=</span> fast<span class=\"token punctuation\">.</span>Next <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\tfast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\tn<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\ttmp1 <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\ttmp2 <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token function\">reverseIntervalList</span><span class=\"token punctuation\">(</span>slow<span class=\"token punctuation\">.</span>Next<span class=\"token punctuation\">,</span> fast<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tslow<span class=\"token punctuation\">.</span>Next<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> tmp1</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tslow<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> fast</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tslow<span class=\"token punctuation\">,</span> fast <span class=\"token operator\">=</span> tmp2<span class=\"token punctuation\">,</span> tmp2</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/32594.html",
            "url": "https://onlyzyx.com/posts/32594.html",
            "title": "LeetCode_24: Swap Nodes in Pairs",
            "date_published": "2018-10-23T06:34:37.000Z",
            "content_html": "<html><head></head><body><h2 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h2>\n<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc3dhcC1ub2Rlcy1pbi1wYWlycy8=\">https://leetcode.com/problems/swap-nodes-in-pairs/</span></p>\n<h2 id=\"题目大意\"><a class=\"anchor\" href=\"#题目大意\">#</a> 题目大意</h2>\n<p>将链表中的节点两两交换。</p>\n<ul>\n<li><strong>Example</strong></li>\n</ul>\n<p>Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</p>\n<p><strong><font color=\"purple\">Hint:</font></strong></p>\n<p><code>Your algorithm should use only constant extra space.</code></p>\n<p><code>You may not modify the values in the list's nodes, only nodes itself may be changed.</code></p>\n<p>即不可采取交换节点的方式，同时保证空间复杂度为常数级别</p>\n<h2 id=\"题解\"><a class=\"anchor\" href=\"#题解\">#</a> 题解</h2>\n<h3 id=\"一句话题解\"><a class=\"anchor\" href=\"#一句话题解\">#</a> 一句话题解</h3>\n<p>直接一张图说明，定义一个无效空头结点便于统一化操作</p>\n<p><img data-src=\"/posts/32594/LeetCode00024_SwapNodesInPairs.png\" alt=\"SwapNodesInPairs\" width=\"100%\"></p>\n<h2 id=\"复杂度\"><a class=\"anchor\" href=\"#复杂度\">#</a> 复杂度</h2>\n<p>时间复杂度  <code>O(n)</code></p>\n<p>空间复杂度  <code>O(1)</code></p>\n<h2 id=\"ac代码\"><a class=\"anchor\" href=\"#ac代码\">#</a> AC 代码</h2>\n<p><code>c++</code>  版本</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct ListNode {</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     ListNode *next;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     ListNode(int x) : val(x), next(NULL) {}</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * };</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ListNode <span class=\"token operator\">*</span><span class=\"token function\">swapPairs</span><span class=\"token punctuation\">(</span>ListNode <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>ret <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        ret<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>pre <span class=\"token operator\">=</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span> <span class=\"token operator\">!=</span> cur <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">!=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            pre<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> pre<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            pre<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>go</code>  版本</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * type ListNode struct {</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     Val int</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     Next *ListNode</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * }</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">swapPairs</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">*</span>ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ListNode <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tret <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>ListNode<span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tret<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> head</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tpre<span class=\"token punctuation\">,</span> cur <span class=\"token operator\">:=</span> ret<span class=\"token punctuation\">,</span> head</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">!=</span> cur <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">!=</span> cur<span class=\"token punctuation\">.</span>Next <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tpre<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcur<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">.</span>Next<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tpre<span class=\"token punctuation\">.</span>Next<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> cur</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tpre <span class=\"token operator\">=</span> cur</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/49608.html",
            "url": "https://onlyzyx.com/posts/49608.html",
            "title": "LeetCode_23: Merge k Sorted Lists",
            "date_published": "2018-10-21T18:43:08.000Z",
            "content_html": "<html><head></head><body><h2 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h2>\n<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWVyZ2Utay1zb3J0ZWQtbGlzdHMvZGVzY3JpcHRpb24v\">https://leetcode.com/problems/merge-k-sorted-lists/description/</span></p>\n<h2 id=\"题目大意\"><a class=\"anchor\" href=\"#题目大意\">#</a> 题目大意</h2>\n<p>合并 k 个已排序的链表并将其作为一个排序列表返回。 分析并描述其复杂性。</p>\n<ul>\n<li><strong>Example</strong></li>\n</ul>\n<pre><code>Input:\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\nOutput: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</code></pre>\n<h2 id=\"题解\"><a class=\"anchor\" href=\"#题解\">#</a> 题解</h2>\n<h3 id=\"一句话题解\"><a class=\"anchor\" href=\"#一句话题解\">#</a> 一句话题解</h3>\n<p>直接借用 21 题 <a href=\"https://onlyzyx.com/posts/12203.html\">Merge Two Sorted Lists</a> 的双链表合并借用归并排序的思想分治合并即可</p>\n<h2 id=\"复杂度\"><a class=\"anchor\" href=\"#复杂度\">#</a> 复杂度</h2>\n<p>时间复杂度  <code>O(nlogn)</code></p>\n<p>空间复杂度  <code>O(1)</code></p>\n<h2 id=\"ac代码\"><a class=\"anchor\" href=\"#ac代码\">#</a> AC 代码</h2>\n<p><code>c++</code>  版本</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ListNode <span class=\"token operator\">*</span><span class=\"token function\">mergeKLists</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>ListNode <span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>lists<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> lists<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                lists<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> lists<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            n <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> lists<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    ListNode <span class=\"token operator\">*</span><span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>ListNode <span class=\"token operator\">*</span>l1<span class=\"token punctuation\">,</span> ListNode <span class=\"token operator\">*</span>l2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>pRet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>curNode <span class=\"token operator\">=</span> pRet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span> <span class=\"token operator\">!=</span> l1 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">!=</span> l2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1<span class=\"token operator\">-&gt;</span>val <span class=\"token operator\">&lt;</span> l2<span class=\"token operator\">-&gt;</span>val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                curNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                l1 <span class=\"token operator\">=</span> l1<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                curNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                l2 <span class=\"token operator\">=</span> l2<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            curNode <span class=\"token operator\">=</span> curNode<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        curNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">==</span> l1 <span class=\"token operator\">?</span> l2 <span class=\"token operator\">:</span> l1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> pRet<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>go</code>  版本</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">*</span>ListNode<span class=\"token punctuation\">,</span> l2 <span class=\"token operator\">*</span>ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ListNode <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tpRet <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>ListNode<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcurNode <span class=\"token operator\">:=</span> pRet</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">!=</span> l1 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">!=</span> l2 <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> l1<span class=\"token punctuation\">.</span>Val <span class=\"token operator\">&lt;</span> l2<span class=\"token punctuation\">.</span>Val <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\tcurNode<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> l1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\tl1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\tcurNode<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> l2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\tl2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcurNode <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">!=</span> l1 <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcurNode<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> l1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tcurNode<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> l2</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">return</span> pRet<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">mergeKLists</span><span class=\"token punctuation\">(</span>lists <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ListNode <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tn <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">==</span> n <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">for</span> n <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tmid <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tlists<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> lists<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tn <span class=\"token operator\">=</span> mid</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">return</span> lists<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/21073.html",
            "url": "https://onlyzyx.com/posts/21073.html",
            "title": "LeetCode_22: Generate Parentheses",
            "date_published": "2018-10-15T07:25:39.000Z",
            "content_html": "<html><head></head><body><h2 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h2>\n<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZ2VuZXJhdGUtcGFyZW50aGVzZXMvZGVzY3JpcHRpb24v\">https://leetcode.com/problems/generate-parentheses/description/</span></p>\n<h2 id=\"题目大意\"><a class=\"anchor\" href=\"#题目大意\">#</a> 题目大意</h2>\n<p>给出数字 n, 生成共有 n 对括号的所有正确的形式，有效形式见例子</p>\n<ul>\n<li><strong>Example</strong></li>\n</ul>\n<pre><code>For example, given n = 3, a solution set is:\n[\n  \"((()))\",\n  \"(()())\",\n  \"(())()\",\n  \"()(())\",\n  \"()()()\"\n]\n</code></pre>\n<h2 id=\"题解\"><a class=\"anchor\" href=\"#题解\">#</a> 题解</h2>\n<h3 id=\"一句话题解\"><a class=\"anchor\" href=\"#一句话题解\">#</a> 一句话题解</h3>\n<p>如下图所示此题结果是一颗二叉树根节点到每个叶子节点的路线集合 (已经略去不符合题目要求的无效结果), 利用递归 + 回溯的搜索过程即可完成这个过程，要结果有效需要满足如下条件，利用条件合理剪枝，dfs 搜索即可</p>\n<pre><code>// 合理化剪枝\nif (l &lt; n) insert('(')\nif (r &lt; l) insert(')')\n</code></pre>\n<p><img data-src=\"/posts/21073/LeetCode00022_GenerateParentheses.png\" alt=\"Generate Parentheses\" width=\"100%\"></p>\n<h2 id=\"复杂度\"><a class=\"anchor\" href=\"#复杂度\">#</a> 复杂度</h2>\n<p>时间复杂度  <code>O(2^n)</code></p>\n<p>空间复杂度  <code>O(n)</code></p>\n<h2 id=\"ac代码\"><a class=\"anchor\" href=\"#ac代码\">#</a> AC 代码</h2>\n<p><code>c++</code>  版本</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> <span class=\"token function\">generateParenthesis</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> string cur<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> l <span class=\"token operator\">&amp;&amp;</span> n <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            cur<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token char\">'('</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            cur<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            cur<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token char\">')'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            cur<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>go</code>  版本</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> cur <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> ret <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> l <span class=\"token operator\">&amp;&amp;</span> n <span class=\"token operator\">==</span> r <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token operator\">*</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ret<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span> l <span class=\"token operator\">&lt;</span> n <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tcur <span class=\"token operator\">+=</span> <span class=\"token string\">\"(\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span> r <span class=\"token operator\">&lt;</span> l <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcur <span class=\"token operator\">+=</span> <span class=\"token string\">\")\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">generateParenthesis</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">var</span> ret <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/12203.html",
            "url": "https://onlyzyx.com/posts/12203.html",
            "title": "LeetCode_21: Merge Two Sorted Lists",
            "date_published": "2018-10-14T03:20:24.000Z",
            "content_html": "<html><head></head><body><h2 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h2>\n<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWVyZ2UtdHdvLXNvcnRlZC1saXN0cy9kZXNjcmlwdGlvbi8=\">https://leetcode.com/problems/merge-two-sorted-lists/description/</span></p>\n<h2 id=\"题目大意\"><a class=\"anchor\" href=\"#题目大意\">#</a> 题目大意</h2>\n<p>合并两个有序链表并返回一个新的列表。</p>\n<ul>\n<li><strong>Example</strong></li>\n</ul>\n<pre><code>Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4\nOutput: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4\n</code></pre>\n<h2 id=\"题解\"><a class=\"anchor\" href=\"#题解\">#</a> 题解</h2>\n<h3 id=\"一句话题解\"><a class=\"anchor\" href=\"#一句话题解\">#</a> 一句话题解</h3>\n<p>简单归并排序 (由于这儿只有两条链表还是有序的，所以时间复杂度退化为)</p>\n<h2 id=\"复杂度\"><a class=\"anchor\" href=\"#复杂度\">#</a> 复杂度</h2>\n<p>时间复杂度  <code>O(n)</code></p>\n<p>空间复杂度  <code>O(1)</code></p>\n<h2 id=\"ac代码\"><a class=\"anchor\" href=\"#ac代码\">#</a> AC 代码</h2>\n<p><code>c++</code>  版本</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ListNode <span class=\"token operator\">*</span><span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>ListNode <span class=\"token operator\">*</span>l1<span class=\"token punctuation\">,</span> ListNode <span class=\"token operator\">*</span>l2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>pRet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>curNode <span class=\"token operator\">=</span> pRet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span> <span class=\"token operator\">!=</span> l1 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">!=</span> l2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1<span class=\"token operator\">-&gt;</span>val <span class=\"token operator\">&lt;</span> l2<span class=\"token operator\">-&gt;</span>val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                curNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                l1 <span class=\"token operator\">=</span> l1<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                curNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                l2 <span class=\"token operator\">=</span> l2<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            curNode <span class=\"token operator\">=</span> curNode<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span> <span class=\"token operator\">!=</span> l1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            curNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span> <span class=\"token operator\">!=</span> l2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            curNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> pRet<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>go</code>  版本</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">*</span>ListNode<span class=\"token punctuation\">,</span> l2 <span class=\"token operator\">*</span>ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ListNode <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tpRet <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>ListNode<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcurNode <span class=\"token operator\">:=</span> pRet</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">!=</span> l1 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">!=</span> l2 <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> l1<span class=\"token punctuation\">.</span>Val <span class=\"token operator\">&lt;</span> l2<span class=\"token punctuation\">.</span>Val <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\tcurNode<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> l1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\tl1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\tcurNode<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> l2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\tl2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcurNode <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">!=</span> l1 <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcurNode<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> l1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">!=</span> l2 <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tcurNode<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> l2</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span> pRet<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/15005.html",
            "url": "https://onlyzyx.com/posts/15005.html",
            "title": "LeetCode_20: Valid Parentheses",
            "date_published": "2018-10-12T10:45:49.000Z",
            "content_html": "<html><head></head><body><h2 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h2>\n<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdmFsaWQtcGFyZW50aGVzZXMvZGVzY3JpcHRpb24v\">https://leetcode.com/problems/valid-parentheses/description/</span></p>\n<h2 id=\"题目大意\"><a class=\"anchor\" href=\"#题目大意\">#</a> 题目大意</h2>\n<p>输入一个由各种括号组成的字符串，按照如下规则判断字符串是否有效</p>\n<p>条件:</p>\n<ol>\n<li>开括号必须由相同类型的括号来关闭，即 '(' 由 ')' 关闭、'[' 由 ']' 关闭，'{' 由 '}' 关闭.</li>\n<li>按照正确的顺序打开的括号必须按照同样顺序关闭。</li>\n</ol>\n<p><strong><font color=\"purple\">Hont:</font></strong> Note that an empty string is also considered valid.</p>\n<ul>\n<li><strong>Example</strong></li>\n</ul>\n<pre><code>Input: \"()\"\nOutput: true\n\nInput: \"()[]{}\"\nOutput: true\n\nInput: \"(]\"\nOutput: false\n\nInput: \"([)]\"\nOutput: false\n\nInput: \"{[]}\"\nOutput: true\n</code></pre>\n<h2 id=\"题解\"><a class=\"anchor\" href=\"#题解\">#</a> 题解</h2>\n<h3 id=\"一句话题解\"><a class=\"anchor\" href=\"#一句话题解\">#</a> 一句话题解</h3>\n<p>括号匹配的规则符合后进先出的原则，直接使用 stack 模拟流程即可。每次选取栈顶和当前输入比较，看是否匹配；匹配则栈顶元素出栈，否则当前元素入栈，当输入串遍历完毕后判断栈是否为空即可</p>\n<h2 id=\"复杂度\"><a class=\"anchor\" href=\"#复杂度\">#</a> 复杂度</h2>\n<p>时间复杂度  <code>O(n)</code></p>\n<p>空间复杂度  <code>O(n)</code></p>\n<h2 id=\"ac代码\"><a class=\"anchor\" href=\"#ac代码\">#</a> AC 代码</h2>\n<p><code>c++</code>  版本</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">&gt;</span> match<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> c <span class=\"token operator\">:</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isMatch</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token char\">'\\0'</span> <span class=\"token operator\">:</span> match<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                match<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                match<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> match<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">isMatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token char\">'('</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token char\">'['</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">==</span> <span class=\"token char\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token char\">'{'</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">==</span> <span class=\"token char\">'}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>go</code>  版本</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">isMatch</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token char\">'('</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token char\">'['</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">==</span> <span class=\"token char\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token char\">'{'</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">==</span> <span class=\"token char\">'}'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">var</span> match <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tlens <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">==</span> lens <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isMatch</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">[</span>lens<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\tmatch <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">,</span> <span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\tmatch <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> lens<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/24206.html",
            "url": "https://onlyzyx.com/posts/24206.html",
            "title": "LeetCode_19: Remove Nth Node From End of List",
            "date_published": "2018-10-12T09:56:33.000Z",
            "content_html": "<html><head></head><body><h2 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h2>\n<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVtb3ZlLW50aC1ub2RlLWZyb20tZW5kLW9mLWxpc3QvZGVzY3JpcHRpb24v\">https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/</span></p>\n<h2 id=\"题目大意\"><a class=\"anchor\" href=\"#题目大意\">#</a> 题目大意</h2>\n<p>给定一个链表和数字 n, 删除链表倒数第 n 个节点并返回结果链表</p>\n<p>Hint: Given n will always be valid.</p>\n<ul>\n<li><strong>Example</strong></li>\n</ul>\n<pre><code>Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.\nAfter removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.\n</code></pre>\n<h2 id=\"题解\"><a class=\"anchor\" href=\"#题解\">#</a> 题解</h2>\n<h3 id=\"一句话题解\"><a class=\"anchor\" href=\"#一句话题解\">#</a> 一句话题解</h3>\n<p>快慢指针法，先行指针先走 n 步后，快慢指针再同时前行。这样当先行指针走到链表末尾，后续指针正好可以操作倒数第 n 个节点，直接就地删除即可</p>\n<h2 id=\"复杂度\"><a class=\"anchor\" href=\"#复杂度\">#</a> 复杂度</h2>\n<p>时间复杂度  <code>O(n)</code></p>\n<p>空间复杂度  <code>O(1)</code></p>\n<h2 id=\"ac代码\"><a class=\"anchor\" href=\"#ac代码\">#</a> AC 代码</h2>\n<p><code>c++</code>  版本</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ListNode <span class=\"token operator\">*</span><span class=\"token function\">removeNthFromEnd</span><span class=\"token punctuation\">(</span>ListNode <span class=\"token operator\">*</span>head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span> <span class=\"token operator\">==</span> head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>ret <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        ret<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>pre <span class=\"token operator\">=</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>cur <span class=\"token operator\">=</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">!=</span> pre<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            pre <span class=\"token operator\">=</span> pre<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token operator\">--</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span> <span class=\"token operator\">!=</span> pre<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            pre <span class=\"token operator\">=</span> pre<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        pre <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        cur<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">delete</span> <span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>go</code>  版本</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">removeNthFromEnd</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">*</span>ListNode<span class=\"token punctuation\">,</span> n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ListNode <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">==</span> head <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tret <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>ListNode<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tret<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> head</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tpre<span class=\"token punctuation\">,</span> cur <span class=\"token operator\">:=</span> ret<span class=\"token punctuation\">,</span> ret</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">for</span> n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">!=</span> pre<span class=\"token punctuation\">.</span>Next <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tpre <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tn<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">!=</span> pre<span class=\"token punctuation\">.</span>Next <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tpre <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tpre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcur<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>Next<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">.</span>Next</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "https://onlyzyx.com/posts/53762.html",
            "url": "https://onlyzyx.com/posts/53762.html",
            "title": "LeetCode_18: 4Sum",
            "date_published": "2018-10-12T07:59:49.000Z",
            "content_html": "<html><head></head><body><h2 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h2>\n<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvNHN1bS9kZXNjcmlwdGlvbi8=\">https://leetcode.com/problems/4sum/description/</span></p>\n<h2 id=\"题目大意\"><a class=\"anchor\" href=\"#题目大意\">#</a> 题目大意</h2>\n<p>给出一个包含 n 个整数的数组 nums 以及一个目标值 target, 这个数组是否存在有元素 a,b,c,d 使得 <code>a + b + c + d = target</code> , 找出所有满足条件的 a,b,c,d 的组合</p>\n<ul>\n<li><strong>Example</strong></li>\n</ul>\n<pre><code>Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.\n\nA solution set is:\n[\n  [-1,  0, 0, 1],\n  [-2, -1, 1, 2],\n  [-2,  0, 0, 2]\n]\n</code></pre>\n<h2 id=\"题解\"><a class=\"anchor\" href=\"#题解\">#</a> 题解</h2>\n<p>这题其实是第 15 题的变种，相信看了这篇题解举一反三很容易能拿下这题，<a href=\"https://onlyzyx.com/posts/29404.html\">LeetCode:15.3Sum 题解，Click Here!</a></p>\n<p>这道题由于是求 4 个数的目标值，所以需要滚动查询的数字由 15 题的两个变成了 3 个，很暴力的一个方法，在原来的循环上再加一层循环，内部继续再剩余数组上枚举两个数求和即可</p>\n<p><strong><font color=\"purple\">Hint:</font></strong></p>\n<p>如何优雅的避免重复也是一个坑，外层两个循环都需要判断下当前选取的数字和上一次是不是相同的，相同的直接跳过，内层俩数字枚举时 2 也注意判断即可 (千万别忘了某一层少写了这个条件，不然美滋滋～)</p>\n<h2 id=\"复杂度\"><a class=\"anchor\" href=\"#复杂度\">#</a> 复杂度</h2>\n<p>时间复杂度  <code>O(n^3)</code></p>\n<p>空间复杂度  <code>O(1)</code></p>\n<h2 id=\"ac代码\"><a class=\"anchor\" href=\"#ac代码\">#</a> AC 代码</h2>\n<p><code>c++</code>  版本</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token function\">fourSum</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">int</span> midIndex <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">int</span> lastIndex <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>midIndex <span class=\"token operator\">&lt;</span> lastIndex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token keyword\">int</span> curSum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>midIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>lastIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        ans<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>midIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>lastIndex<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>midIndex <span class=\"token operator\">&lt;</span> lastIndex <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>midIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>midIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                            <span class=\"token operator\">++</span>midIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>midIndex <span class=\"token operator\">&lt;</span> lastIndex <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>lastIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>lastIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                            <span class=\"token operator\">--</span>lastIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">&gt;</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                        <span class=\"token operator\">--</span>lastIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                        <span class=\"token operator\">++</span>midIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>go</code>  版本</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">fourSum</span><span class=\"token punctuation\">(</span>nums <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> target <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">var</span> ans <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tlens <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tsort<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>sort<span class=\"token punctuation\">.</span><span class=\"token function\">IntSlice</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lens<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> lens<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> j <span class=\"token operator\">&gt;</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tmidIndex<span class=\"token punctuation\">,</span> lastIndex <span class=\"token operator\">:=</span> j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> lens<span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> midIndex <span class=\"token operator\">&lt;</span> lastIndex <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\tcurSum <span class=\"token operator\">:=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>midIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>lastIndex<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> curSum <span class=\"token operator\">==</span> target <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t\tans <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>midIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>lastIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t\tmidIndex<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">for</span> midIndex <span class=\"token operator\">&lt;</span> lastIndex <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>midIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>midIndex<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\t\t\tmidIndex<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\t\tlastIndex<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">for</span> midIndex <span class=\"token operator\">&lt;</span> lastIndex <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>lastIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>lastIndex<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t\t\tlastIndex<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> curSum <span class=\"token operator\">&gt;</span> target <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\t\tlastIndex<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t\tmidIndex<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">return</span> ans</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        }
    ]
}